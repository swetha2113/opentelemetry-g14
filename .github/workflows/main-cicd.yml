name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: cart
  IMAGE_NAME: cart

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    
      - name: Build image cart
        id: build-image-cart
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: "latest"
          ECR_REPOSITORY_CART: "cart"
        run: |
          docker build -f src/cart/src/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_CART:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_CART:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_CART:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run cart service tests
        run: |
          echo "Running cart service tests..."
          cd src/cart && npm install && npm test || true

      - name: Run security scans
        run: |
          echo "Running security scans..."
          cd src/cart && npm audit --production || true

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy cart service
        run: |
          CURRENT_VERSION=$(kubectl get deployment cart -n otel-demo -o=jsonpath='{.spec.template.spec.containers[0].image}' | cut -d':' -f2 || echo "none")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          kubectl set image deployment/cart cart=${{ steps.login-ecr.outputs.registry }}/cart:latest -n otel-demo
          kubectl rollout status deployment/cart -n otel-demo --timeout=300s

      - name: Verify cart deployment
        run: |
          echo "Verifying cart service deployment..."
          kubectl wait --for=condition=available --timeout=300s deployment/cart -n otel-demo
          echo "Cart service deployment verified successfully"

  rollback:
    needs: deploy
    if: failure() && needs.deploy.result == 'failure'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Rollback cart service
        run: |
          echo "Rolling back cart service to previous version..."
          kubectl rollout undo deployment/cart -n otel-demo
          kubectl rollout status deployment/cart -n otel-demo --timeout=300s

      - name: Verify rollback
        run: |
          echo "Verifying cart service rollback..."
          kubectl wait --for=condition=available --timeout=300s deployment/cart -n otel-demo
          echo "Cart service rollback verified successfully"

      - name: Notify rollback
        if: always()
        run: |
          echo "Cart service deployment failed and was rolled back to version ${{ env.CURRENT_VERSION }}"
          # Add notification logic here (e.g., Slack, email)
          # Example Slack notification:
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"Cart service deployment failed and was rolled back"}' ${{ secrets.SLACK_WEBHOOK_URL }} 