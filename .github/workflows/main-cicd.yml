name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: g14
  IMAGE_NAME: ${{ env.ECR_REPOSITORY }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
            submodules: true               # This is required to checkout submodules
            token: ${{ secrets.ACCESS_TOKEN }}  # Using the personal access token for authentication

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    

      - name: Build image accounting
        id: build-image-accounting
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: "latest"
          ECR_REPOSITORY_ACCOUNTING: "accounting"
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd src/accounting
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_ACCOUNTING:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_ACCOUNTING:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_ACCOUNTING:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Node.js service tests
        run: |
          echo "Running Node.js service tests..."
          cd src/payment && npm install && npm test || true
          cd src/email && npm install && npm test || true
          cd src/currency && npm install && npm test || true

      - name: Run Go service tests
        run: |
          echo "Running Go service tests..."
          cd src/product-catalog && go test ./... || true
          cd src/shipping && go test ./... || true
          cd src/recommendation && go test ./... || true

      - name: Run Java service tests
        run: |
          echo "Running Java service tests..."
          cd src/ad && ./gradlew test || true
          cd src/fraud-detection && ./gradlew test || true

      - name: Run frontend tests
        run: |
          echo "Running frontend tests..."
          cd src/frontend && npm install && npm test || true
          cd src/frontend && npm run cypress:run || true

      - name: Run React Native tests
        run: |
          echo "Running React Native tests..."
          cd src/react-native-app && npm install && npm test || true

      - name: Run security scans
        run: |
          echo "Running security scans..."
          # Run npm audit for Node.js services
          find src -name "package.json" -execdir npm audit --production \; || true
          
          # Run OWASP dependency check for Java services
          find src -name "build.gradle" -execdir ./gradlew dependencyCheckAnalyze \; || true
          
          # Run Go security checks
          find src -name "go.mod" -execdir go list -json -m all | nancy sleuth \; || true

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy accounting service
        run: |
          # Store the current deployment version for rollback
          CURRENT_VERSION=$(kubectl get deployment accounting -o=jsonpath='{.spec.template.spec.containers[0].image}' | cut -d':' -f2)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          
          # Deploy new version of accounting service
          kubectl set image deployment/accounting accounting=${{ steps.login-ecr.outputs.registry }}/accounting:latest
          
          # Wait for deployment to complete
          kubectl rollout status deployment/accounting --timeout=300s

      - name: Verify accounting deployment
        run: |
          echo "Verifying accounting service deployment..."
          # Check accounting service health endpoint
          kubectl wait --for=condition=available --timeout=300s deployment/accounting
          echo "Accounting service deployment verified successfully"

  rollback:
    needs: deploy
    if: failure() && needs.deploy.result == 'failure'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Rollback accounting service
        run: |
          echo "Rolling back accounting service to previous version..."
          # Rollback to previous version
          kubectl rollout undo deployment/accounting
          
          # Wait for rollback to complete
          kubectl rollout status deployment/accounting --timeout=300s

      - name: Verify rollback
        run: |
          echo "Verifying accounting service rollback..."
          # Check accounting service health endpoint
          kubectl wait --for=condition=available --timeout=300s deployment/accounting
          echo "Accounting service rollback verified successfully"

      - name: Notify rollback
        if: always()
        run: |
          echo "Accounting service deployment failed and was rolled back to version ${{ env.CURRENT_VERSION }}"
          # Add notification logic here (e.g., Slack, email)
          # Example Slack notification:
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"Accounting service deployment failed and was rolled back"}' ${{ secrets.SLACK_WEBHOOK_URL }} 